{
  "Version": "7",
  "Year": "2025",
  "Semester": "Summer",
  "project_name": "NewsNet Agents - AI agents forming a network to process news",
  "Objective": " \n             \n            The objective of this project is to develop an intelligent multi-agent AI system that delivers concise, personalized, and bias-aware news summaries in real time. Designed to tackle the challenges of information overload, misinformation, and user attention fatigue, the system leverages a team of autonomous LLM-powered agents \u2014 each specializing in a distinct task across the news pipeline.\n\n            Core agents in the system include a News Fetcher Agent to source live headlines, a Summarizer Agent to distill long-form articles into brief 2\u20133 sentence overviews, a Personalization Agent to tailor news feeds based on user interests, and optional modules such as Bias Detector, Voice Narrator, and Fact-Checker agents for added credibility and accessibility.\n\n            The system offers multi-source integration via RSS feeds, APIs (e.g., NewsAPI, NYT), and social channels (e.g., Reddit, Twitter), enabling users to receive coherent, multi-perspective daily digests through a web dashboard or messaging interface like Telegram.\n\n         Key goals of the project include:\n             - Designing a collaborative architecture of LLM-based agents capable of communicating contextually to deliver end-to-end news experiences.\n            - Summarizing complex articles using state-of-the-art models like GPT-4, BART, or T5.\n            - Enhancing credibility through optional fact-checking and bias analysis using sentiment/tone models.\n            - Supporting accessibility through voice-enabled summaries and multilingual delivery.\n            - Providing a distraction-free, personalized news experience through topic filtering, time limits, and clean UI delivery.\n\n            The project envisions a future-ready, human-centric news assistant \u2014 serving as both a curator and a conscience in the evolving information landscape.\n    \n            ",
  "Dataset": "\n            The dataset for fine-tuning and agent-level customization is still to be \n            finalized (TBD). However, the system will primarily rely on a combination\n             of publicly available datasets and real-time data streams. \n             These will support the training, evaluation, and deployment of various agents\n              across summarization, personalization, bias detection, and fact-checking tasks.\n              \n              following data sources are being considered:\n              News Summarization Datasets- \n                CNN/DailyMail Dataset - https://www.kaggle.com/datasets/gowrishankarp/newspaper-text-summarization-cnn-dailymail\n                BBC News summary Dataset- https://www.kaggle.com/datasets/pariza/bbc-news-summary\n                Multi-news dataset- https://huggingface.co/datasets/alexfabbri/multi_news\n                \n              News classification dataset - \n                news catagory datset- https://huggingface.co/datasets/khalidalt/HuffPost\n                AG news class dataset- https://www.kaggle.com/datasets/amananandrai/ag-news-classification-dataset\n                \n              News sentiment analysis (Bias detection)-\n                Twitter/ Reddit - \n                media bias by all media - https://github.com/irgroup/Qbias/tree/main\n                custom web scraping - of media pages or allside media page \n                \n              Check the fact of the news- \n                FEVER DATASET- https://fever.ai/dataset/fever.html\n                Fake news detection  dataset- https://www.kaggle.com/datasets/emineyetm/fake-news-detection-datasets\n                Real time fact check with google RAG - https://cloud.google.com/generative-ai-app-builder/docs/check-grounding\n                \n              Real time News - \n               News apis -  https://newsapi.org/\n               Google news- https://rss.app/en/rss-feed/google-news-rss-feed\n                           and \n                Serpi api -Scrape Google and other search engines from our fast, easy, and complete API\n                         https://serpapi.com/\n                         \n                Gnews api , News Api , web scrping ,NY time , the gurdians\n                \n                And GPT BART  \n                \n            \n                           \n                \n                \n              \n            ",
  "Rationale": "\n            Generative AI (genAI) technology offers a novel approach to supporting IPE given that routinely the diversity of team member participants is limited, and some fields are under-represented in IPE training but influential in \"real world\" teams. By using LLM-based chatbots for this educational\n             interventions, there is potential to both improve how learning experiences are delivered and  enhance student post-IPE performance . In this project, we will explore how an AI-driven team collaboration can  act as A news \n             Agent.\n            ",
  "Approach": "\n           The development of the Short News Multi-Agent AI System will be executed in structured phases, each targeting a critical component of the overall system functionality:\n        \n            **Phase 1 \u2013 Requirement Analysis**: \n            Define user personas, topic preferences, and key features such as summarization depth, delivery modes (text/audio), bias detection level, and supported platforms (web, chat interface).\n        \n            **Phase 2 \u2013 Agent Architecture Design**: \n            Design modular agent roles including News Fetcher, Summarizer, Bias Detector, Fact-Checker, Personalization Agent, and Voice Reader. Determine inter-agent communication and task delegation flows.\n        \n            **Phase 3 \u2013 Dataset Integration & Fine-Tuning**: \n            Collect and preprocess both static (e.g., CNN/DailyMail, BBC) and live (e.g., NewsAPI, Google RSS) news data. Fine-tune summarization and bias detection models using labeled datasets and apply RAG where needed.\n        \n            **Phase 4 \u2013 Agent Development**: \n            Implement each agent using LLMs and supporting APIs. Integrate them into a collaborative pipeline using tools like LangChain, FastAPI, or custom orchestration scripts.\n        \n            **Phase 5 \u2013 System Testing & Evaluation**: \n            Evaluate performance across key metrics: summary quality (fluency, coherence, factuality), bias detection accuracy, personalization relevance, and system response time.\n        \n            **Phase 6 \u2013 User Interface & Delivery Integration**: \n            Build a clean UI or messaging interface (e.g., Streamlit or Telegram bot) to present news digests. Optionally, enable voice output using TTS tools and multilingual support.\n        \n            **Phase 7 \u2013 Real-Time Deployment & Feedback Loop**: \n            Deploy the system in real-time, allowing for continuous feedback collection, usage analytics, and future updates via retraining or agent tuning.\n            ",
  "Timeline": "\n             This is a projected timeline for the development and evaluation of the Short News Multi-Agent AI System:\n\n            **Weeks 1\u20132**: \n            Requirement analysis, agent role definition, and setup of core tools (e.g., Git, APIs, model libraries, Streamlit/Telegram interface). Finalize project scope and datasets.\n        \n            **Weeks 3\u20135**: \n            Develop initial versions of the News Fetcher, Summarizer, and Personalization agents. Test with static datasets (e.g., CNN/DailyMail, BBC News).\n        \n            **Weeks 6\u20138**: \n            Integrate live news sources (e.g., NewsAPI, RSS) and implement Bias Detector and Fact-Checker agents. Begin inter-agent communication and pipeline orchestration.\n        \n            **Weeks 9\u201311**: \n            Conduct iterative testing on the full agent workflow. Evaluate output quality (summarization, bias detection, fact-checking) and optimize model performance.\n        \n            **Weeks 12\u201313**: \n            Build user interface (Streamlit web app or Telegram bot). Integrate personalization logic and optional voice/audio delivery features.\n        \n            **Weeks 14\u201315**: \n            Perform usability testing and gather user feedback. Refine based on user experience and interaction data.\n        \n            **Week 16**: \n            Finalize documentation, project report, and system demonstration for presentation or deployment.\n                    ",
  "Expected Number Students": "\n            This project is doing individually given the scope and need for interdisciplinary collaboration we will in future.\n            \n            ",
  "Possible Issues": "\n            Potential challenges for this project include:\n                **Limited Access to Real-Time News Data**: Some APIs (e.g., NewsAPI, NYTimes) may impose rate limits or require paid access for full article content, potentially impacting the real-time capabilities of the system.\n\n                **Dataset Alignment for Bias and Fact-Checking**: High-quality, labeled datasets for political bias detection or factual verification are limited. Building or curating custom datasets may be necessary.\n            \n                **LLM Output Reliability**: Summarization and fact-checking using large language models may occasionally produce hallucinations, biased phrasing, or unsupported claims, requiring additional post-processing or human verification layers.\n            \n                **Agent Coordination Complexity**: Ensuring that each agent (fetcher, summarizer, bias detector, etc.) communicates seamlessly without errors or logical breakdowns may require careful orchestration and testing.\n            \n                **Latency and Scalability**: Real-time performance with multiple agents could introduce delays, especially when querying external APIs or running large models on limited compute resources.\n            \n                **User Trust and Explainability**: Users may question the credibility of AI-generated summaries. Providing explainability (e.g., source highlighting, bias score justification) will be key to adoption and trust.\n            \n                **Optional Voice/Chatbot Integration**: Converting text into audio or integrating chat interfaces (Telegram, WhatsApp) may present compatibility issues, especially across platforms or languages.\n                        ",
  "Proposed by": "Fulsundar Vishal",
  "Proposed by email": "vishal.fulsundar@gwu.edu",
  "instructor": "Amir Jafari",
  "instructor_email": "ajafari@gmail.com",
  "github_repo": "https://github.com/vishalgwu/Multi-Agent-"
}